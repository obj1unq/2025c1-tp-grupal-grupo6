import wollok.game.*
import profesAlumnos.*
import posiciones.*
import timer.*
import nivel.*
import autos.*

describe "nivel 1" {

    method initialize() {
      nivel1.configurar()
    }

    test "puede moverse hacia arriba" {
      assert.equals(alumno.position(),game.at(8, 4))
      assert.that(nivel1.puedeAtravesar(alumno, game.at(8, 5)))
      assert.that(nivel1.puedePasar(game.at(8, 5)))
    }

    test "puede moverse hacia abajo" {
      alumno.position(game.at(5,5))
      assert.notThat(nivel1.estaEnBorde(game.at(5, 5)))
      assert.that(nivel1.estaDentroDeLimite(game.at(5, 4)))
      assert.that(nivel1.puedePasar(game.at(5, 4)))
    }

    test "no puede moverse hacia abajo" {
      assert.equals(alumno.position(),game.at(8, 4))
      assert.that(nivel1.puedeAtravesar(alumno, game.at(8, 3)))
      assert.notThat(nivel1.puedePasar(game.at(8, 3)))
    }

    test "puede moverse hacia izquierda" {
      assert.notThat(nivel1.estaEnBorde(game.at(7,4)))
      assert.that(nivel1.estaDentroDeLimite(game.at(7,4)))
      assert.that(nivel1.puedePasar(game.at(7,4)))
    }

    test "no puede moverse hacia izquierda" {
      alumno.position(game.at(0,5))
      assert.that(nivel1.estaEnBorde(game.at(0, 5)))
      assert.notThat(nivel1.puedePasar(game.at(-1, 5)))
    }

    test "puede moverse hacia derecha" {
      assert.notThat(nivel1.estaEnBorde(game.at(9,4)))
      assert.that(nivel1.estaDentroDeLimite(game.at(9,4)))
      assert.that(nivel1.puedePasar(game.at(9,4)))
    }

    test "no puede moverse hacia derecha" {
      alumno.position(game.at(14,5))
      assert.that(nivel1.estaEnBorde(game.at(14, 5)))
      assert.notThat(nivel1.puedePasar(game.at(15, 5)))
    }

    test "no puede avanzar si hay un arbusto"{
      alumno.position(game.at(11,4))
      //game.at(1,17) tiene arbusto grande  
      // Este yao esta mas porque cambie la estetica, cambie los valores para que coincida con lo actual
      assert.notThat(nivel1.puedeAtravesar(alumno, game.at(12, 4)))
    }

    test "el auto amarillo choca con el alumno" {
      const am = new Automovil(position = game.at(8,8),direccion = derecha,tipo = amarillo)
      alumno.position(game.at(8,8))
      am.aplicarEfecto(alumno)
      assert.equals(alumno.position(),game.at(8,10))
    }

    test "el auto negro choca con el alumno" {
      const ne = new Automovil(position = game.at(8,8),direccion = derecha,tipo = negro)
      alumno.position(game.at(8,8))
      ne.aplicarEfecto(alumno)
      assert.equals(alumno.position(),game.at(8,7))
    }

    test "el auto policia choca con el alumno" {
      const po = new Automovil(position = game.at(8,8),direccion = derecha,tipo = policia)
      alumno.position(game.at(8,8))
      po.aplicarEfecto(alumno)
      assert.equals(alumno.position().y(),4)
    }

    test "el auto verde choca con el alumno" {
      const ve = new Automovil(position = game.at(8,8),direccion = derecha,tipo = verde)
      alumno.position(game.at(8,8))
      ve.aplicarEfecto(alumno)
      assert.equals(alumno.position().y(),7)
    }
}

describe "nivel 2" {

    method initialize() {
      nivel2.configurar()
    }

    test "no puede moverse hacia abajo en fila x=0" {
      assert.equals(alumno.position(),game.at(7,0))
      assert.notThat(nivel2.puedePasar(game.at(9,4)))
    }

    test "el alumno no puede atravesar a una persona" {
      alumno.position(game.at(6,4))
      assert.notThat(nivel2.puedeAtravesar(alumno, game.at(6,5)))
      assert.notThat(nivel2.puedeAtravesar(alumno, game.at(5,4)))
      assert.that(nivel2.puedeAtravesar(alumno, game.at(6,3)))
      assert.that(nivel2.puedeAtravesar(alumno, game.at(7,4)))
    }

    test "celda (6,15) bloqueada hacia abajo, izquierda y derecha pero permite pasar nivel" {
      alumno.position(game.at(6,15))
      assert.that(nivel2.puedePasar(game.at(6,16)))
      assert.notThat(nivel2.puedeAtravesar(alumno, game.at(6,14)))
      assert.notThat(nivel2.puedeAtravesar(alumno, game.at(5,15)))
      assert.notThat(nivel2.puedeAtravesar(alumno, game.at(7,15)))
    }
}

describe "nivel 3" {

    method initialize() {
      nivel3.configurar()
    }

    test "el alumno no debe atravesar escritorios desde abajo" {
      alumno.position(game.at(8,3))
      assert.notThat(nivel3.puedeAtravesar(alumno, game.at(8, 4)))
    }

    test "el alumno no debe atravesar escritorios desde los costados" {
      alumno.position(game.at(9,4))
      assert.notThat(nivel3.puedeAtravesar(alumno, game.at(10, 4)))
      assert.notThat(nivel3.puedeAtravesar(alumno, game.at(8, 4)))
    }

    test "colision con miembros del equipo" {
      assert.that(nivel3.puedeAtravesar(alumno, game.at(10,3)))
      assert.that(nivel3.puedeAtravesar(alumno, game.at(1,4)))
      assert.that(nivel3.puedeAtravesar(alumno, game.at(12,9)))
    }

      test "los mensaje de los alumnos son correctos" {
        assert.equals("suerte!!", maxi.texto())
        assert.equals("dale!!", maria.texto())
        assert.equals("exitos!!", yami.texto())
    }
  
    test "colision con profesores" {

    }

    test "responde preguntas" {

    }
}